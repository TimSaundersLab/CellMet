[build-system]
requires = ["setuptools>=61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "CellMet"
authors = [
  { name = "Sophie Theis", email = "sophiets13@gmail.com" },
  { name = "all CellMet contributors"}
]
description = "CellMet is cell segmentation shape analysis library"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  # "Programming Language :: Python :: 3.11",
  "Topic :: Scientific/Engineering",
  # "Typing :: Typed",
]
#version = "1.0.pre"
license.file = "LICENSE"
dynamic = ["version"]

[project.optional-dependencies]
test = [
  "nox",
  "pytest",
  "pytest-cov",
  "scikit-build-core",
  "nbval",
]
dev = [
  "pytest",
  "pytest-cov",
  "scikit-build-core",
  "pre-commit",
  "nbval",
]
docs = [
  "Sphinx",
  "myst_parser",
  "sphinx-book-theme",
  "sphinx_copybutton",
]

[project.urls]
Homepage = "https://github.com/TimSaundersLab/CellMet"
"Bug Tracker" = "https://github.com/TimSaundersLab/CellMet/issues"
Discussions = "https://github.com/TimSaundersLab/CellMet/discussions"
Changelog = "https://github.com/TimSaundersLab/CellMet/releases"

[tool.scikit-build]
minimum-version = "0.4"
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"

sdist.exclude = [".github"]
sdist.include = [
  "CellMet/_version.py",
]

[tool.setuptools_scm]
write_to = "CellMet/_version.py"


[tool.cibuildwheel]
test-command = "make test"
build-verbosity = 1

[tool.setuptools.package-dir]
CellMet = "CellMet"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
  "-ra",
  "--showlocals",
  "--strict-markers",
  "--strict-config",
#  "--docker-compose=tests/omero/docker-compose.yml",
 ]
xfail_strict = true
filterwarnings = [
  "error",
  "ignore::DeprecationWarning",
  "default::ResourceWarning"
]
log_cli_level = "INFO"
testpaths = [
  "tests",
]


[tool.mypy]
files = "src"
python_version = "3.10"
warn_unused_configs = true
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true


[tool.flake8]
max-line-length = 88
ignore = ["W605", "W503", "E203"]


[tool.ruff]
select = [
  "E", "F", "W", # flake8
  "B",  "B904",  # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "PTH",         # flake8-use-pathlib
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "T20",         # flake8-print
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
]
extend-ignore = ["PLR", "E501"]
target-version = "py310"
src = ["src"]
unfixable = ["T20", "F841"]

[tool.ruff.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.10"
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
  "design",
  "fixme",
  "line-too-long",
  "missing-module-docstring",
  "wrong-import-position",
]
